import { query } from './database';
import fs from 'fs';
import path from 'path';

interface Migration {
  filename: string;
  version: string;
  sql: string;
}

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
const createMigrationsTable = async (): Promise<void> => {
  const createTableSQL = `
    CREATE TABLE IF NOT EXISTS schema_migrations (
      version VARCHAR(255) PRIMARY KEY,
      applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  `;
  
  await query(createTableSQL);
  console.log('‚úÖ Schema migrations table ready');
};

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
const getAppliedMigrations = async (): Promise<string[]> => {
  const result = await query('SELECT version FROM schema_migrations ORDER BY version');
  return result.rows.map(row => row.version);
};

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏
const readMigrationFiles = (): Migration[] => {
  // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: /app/migrations, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: ../../migrations
  const migrationsDir = process.env.NODE_ENV === 'production' 
    ? path.join(__dirname, '../../migrations')
    : path.join(__dirname, '../../migrations');
  
  if (!fs.existsSync(migrationsDir)) {
    console.log('üìÅ Migrations directory not found, creating...');
    fs.mkdirSync(migrationsDir, { recursive: true });
    return [];
  }

  const files = fs.readdirSync(migrationsDir)
    .filter(file => file.endsWith('.sql'))
    .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

  const migrations: Migration[] = [];

  for (const filename of files) {
    const filePath = path.join(migrationsDir, filename);
    const sql = fs.readFileSync(filePath, 'utf8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "01_create_users_table.sql" -> "01")
    const version = filename.split('_')[0];
    
    migrations.push({
      filename,
      version,
      sql
    });
  }

  return migrations;
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é
const applyMigration = async (migration: Migration): Promise<void> => {
  try {
    console.log(`üìÑ Applying migration: ${migration.filename}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏–∏
    await query(migration.sql);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
    await query(
      'INSERT INTO schema_migrations (version) VALUES ($1)',
      [migration.version]
    );
    
    console.log(`‚úÖ Migration ${migration.filename} applied successfully`);
  } catch (error) {
    console.error(`‚ùå Error applying migration ${migration.filename}:`, error);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
export const runMigrations = async (): Promise<void> => {
  try {
    console.log('üîÑ Starting database migrations...');
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await createMigrationsTable();
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const appliedMigrations = await getAppliedMigrations();
    console.log(`üìã Applied migrations: [${appliedMigrations.join(', ')}]`);
    
    // 3. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const availableMigrations = readMigrationFiles();
    console.log(`üìÅ Available migrations: [${availableMigrations.map(m => m.filename).join(', ')}]`);
    
    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    const pendingMigrations = availableMigrations.filter(
      migration => !appliedMigrations.includes(migration.version)
    );
    
    if (pendingMigrations.length === 0) {
      console.log('‚úÖ No pending migrations, database is up to date');
      return;
    }
    
    console.log(`üöÄ Applying ${pendingMigrations.length} pending migration(s)...`);
    
    for (const migration of pendingMigrations) {
      await applyMigration(migration);
    }
    
    console.log('üéâ All migrations completed successfully!');
    
  } catch (error) {
    console.error('üí• Migration failed:', error);
    throw error; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —É–ø–∞–ª–∞
  }
};
